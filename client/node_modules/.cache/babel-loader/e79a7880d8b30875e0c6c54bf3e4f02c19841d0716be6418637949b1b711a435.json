{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joaol\\\\Desktop\\\\Minute-Masters\\\\client\\\\src\\\\components\\\\timer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Timer = () => {\n  _s();\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [timerRunning, setTimerRunning] = useState(false);\n  const intervalRef = useRef(null);\n  useEffect(() => {\n    // Fetch initial timer value when the component mounts\n    fetchTimerData();\n  }, []);\n  const startTimer = () => {\n    if (!timerRunning) {\n      // Fetch timer data when starting the timer\n      fetchTimerData();\n      const startTime = Date.now() - elapsedTime;\n      setTimerRunning(true);\n      intervalRef.current = setInterval(() => {\n        const currentTime = Date.now();\n        const newElapsedTime = currentTime - startTime;\n        setElapsedTime(newElapsedTime);\n      }, 1000);\n    }\n  };\n  const stopTimer = () => {\n    setTimerRunning(false);\n    clearInterval(intervalRef.current);\n\n    // Save timer data when stopping the timer\n    saveTimerData(elapsedTime);\n  };\n  const displayTime = milliseconds => {\n    const totalSeconds = Math.floor(milliseconds / 1000);\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor(totalSeconds % 3600 / 60);\n    const seconds = totalSeconds % 60;\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n  const saveTimerData = async elapsedTime => {\n    try {\n      const response = await fetch('http://localhost:3000/timer', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          elapsedTime\n        })\n      });\n      if (!response.ok) {\n        console.error('Failed to save timer data');\n      }\n    } catch (error) {\n      console.error('Error saving timer data:', error);\n    }\n  };\n  const fetchTimerData = async () => {\n    try {\n      const response = await fetch('http://localhost:3000/timer');\n      if (response.ok) {\n        const data = await response.json();\n        // Assuming the data structure includes elapsedTime\n        if (data && data.elapsedTime) {\n          setElapsedTime(data.elapsedTime);\n        }\n      } else {\n        console.error('Failed to fetch timer data');\n      }\n    } catch (error) {\n      console.error('Error fetching timer data:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startTimer,\n      children: \"Start Timer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopTimer,\n      children: \"Stop Timer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"timerDisplay\",\n      children: [\"Timer: \", displayTime(elapsedTime)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(Timer, \"NmiN1vbrAJbg8huuLVrYK4UekmI=\");\n_c = Timer;\nexport default Timer;\nvar _c;\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Timer","_s","elapsedTime","setElapsedTime","timerRunning","setTimerRunning","intervalRef","fetchTimerData","startTimer","startTime","Date","now","current","setInterval","currentTime","newElapsedTime","stopTimer","clearInterval","saveTimerData","displayTime","milliseconds","totalSeconds","Math","floor","hours","minutes","seconds","toString","padStart","response","fetch","method","headers","body","JSON","stringify","ok","console","error","data","json","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["C:/Users/Joaol/Desktop/Minute-Masters/client/src/components/timer.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst Timer = () => {\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n  const [timerRunning, setTimerRunning] = useState(false);\r\n  const intervalRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch initial timer value when the component mounts\r\n    fetchTimerData();\r\n  }, []);\r\n\r\n  const startTimer = () => {\r\n    if (!timerRunning) {\r\n      // Fetch timer data when starting the timer\r\n      fetchTimerData();\r\n      \r\n      const startTime = Date.now() - elapsedTime;\r\n      setTimerRunning(true);\r\n\r\n      intervalRef.current = setInterval(() => {\r\n        const currentTime = Date.now();\r\n        const newElapsedTime = currentTime - startTime;\r\n        setElapsedTime(newElapsedTime);\r\n      }, 1000);\r\n    }\r\n  };\r\n\r\n  const stopTimer = () => {\r\n    setTimerRunning(false);\r\n    clearInterval(intervalRef.current);\r\n\r\n    // Save timer data when stopping the timer\r\n    saveTimerData(elapsedTime);\r\n  };\r\n\r\n  const displayTime = (milliseconds) => {\r\n    const totalSeconds = Math.floor(milliseconds / 1000);\r\n    const hours = Math.floor(totalSeconds / 3600);\r\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\r\n    const seconds = totalSeconds % 60;\r\n\r\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\r\n  };\r\n\r\n  const saveTimerData = async (elapsedTime) => {\r\n    try {\r\n      const response = await fetch('http://localhost:3000/timer', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ elapsedTime }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        console.error('Failed to save timer data');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error saving timer data:', error);\r\n    }\r\n  };\r\n\r\n  const fetchTimerData = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3000/timer');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        // Assuming the data structure includes elapsedTime\r\n        if (data && data.elapsedTime) {\r\n          setElapsedTime(data.elapsedTime);\r\n        }\r\n      } else {\r\n        console.error('Failed to fetch timer data');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching timer data:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={startTimer}>Start Timer</button>\r\n      <button onClick={stopTimer}>Stop Timer</button>\r\n      <p id=\"timerDisplay\">Timer: {displayTime(elapsedTime)}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}