{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joaol\\\\Desktop\\\\Minute-Masters\\\\client\\\\src\\\\components\\\\timer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Timer() {\n  _s();\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [timerRunning, setTimerRunning] = useState(false);\n  const intervalRef = useRef(null);\n  const navigate = useNavigate();\n\n  //   useEffect(() => {\n  //     const authToken = localStorage.getItem('token');\n\n  //     // Check if the timer was running before the page was refreshed\n  //     const storedStartTime = localStorage.getItem('startTime');\n  //     if (localStorage.getItem('running')) {\n\n  //       const storedElapsedTime = Date.now() - storedStartTime;\n  //       localStorage.setItem('elapsedTime', storedElapsedTime);\n  //       setElapsedTime(storedElapsedTime);\n\n  //       intervalRef.current = setInterval(() => {\n  //         setElapsedTime((prevElapsedTime) => prevElapsedTime + 1000);\n  //       }, 1000);\n  //     }\n\n  //     if (!authToken) {\n  //       // Redirect to login if no token is present\n  //       navigate('/login');\n  //     } else {\n  //       // Fetch timer data when the component mounts\n  //       fetchTimerData();\n  //     }\n\n  //     // Cleanup the interval and save timer data when the component unmounts or beforeunload\n  //     return () => {\n  //       clearInterval(intervalRef.current);\n  //       saveTimerData();\n  //     };\n  //   }, [navigate]);\n  useEffect(() => {\n    const authToken = localStorage.getItem('token');\n\n    // Check if the timer was running before the page was refreshed\n    const storedStartTime = localStorage.getItem('startTime');\n    if (localStorage.getItem('running')) {\n      const storedElapsedTime = Date.now() - storedStartTime;\n      console.log(storedElapsedTime);\n      localStorage.setItem('elapsedTime', storedElapsedTime);\n      setElapsedTime(storedElapsedTime);\n      setTimerRunning(true);\n      intervalRef.current = setInterval(() => {\n        setElapsedTime(prevElapsedTime => prevElapsedTime + 1000);\n      }, 1000);\n    }\n    if (!authToken) {\n      // Redirect to login if no token is present\n      navigate('/login');\n    } else if (localStorage.getItem('running') != null && localStorage.getItem('running') != true) {\n      // Fetch timer data when the component mounts\n      console.log(\"Im here 2\");\n      console.log(localStorage.getItem('running'));\n      setElapsedTime(localStorage.getItem('elapsedTime'));\n    } else {\n      console.log(\"Im here\");\n      fetchTimerData();\n    }\n\n    // Handle beforeunload event\n    const handleBeforeUnload = event => {\n      saveTimerData();\n      localStorage.setItem('elapsedTime', elapsedTime);\n      // Cancel the default behavior to show the confirmation dialog\n      event.preventDefault();\n      // Chrome requires the returnValue property to be set\n\n      event.returnValue = '';\n    };\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    // Cleanup the interval and remove the beforeunload event listener when the component unmounts\n    return () => {\n      clearInterval(intervalRef.current);\n      saveTimerData();\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [navigate]);\n  const startTimer = () => {\n    if (!timerRunning) {\n      const startTime = Date.now() - elapsedTime;\n      setTimerRunning(true);\n      localStorage.setItem('running', true);\n      localStorage.setItem('startDate', Date.now);\n      // Store the start time in localStorage\n      localStorage.setItem('startTime', elapsedTime);\n      console.log('Start time stored:', startTime);\n      intervalRef.current = setInterval(() => {\n        setElapsedTime(prevElapsedTime => prevElapsedTime + 1000);\n      }, 1000);\n    }\n  };\n  const saveTimerData = async () => {\n    try {\n      const authToken = localStorage.getItem('token');\n      const response = await fetch('http://localhost:5000/timer', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: authToken\n        },\n        body: JSON.stringify({\n          elapsedTime,\n          timeStopped: Boolean(timerRunning)\n        })\n      });\n\n      // Handle the response\n    } catch (error) {\n      console.error('Error saving timer data:', error);\n    }\n  };\n  const stopTimer = () => {\n    //clearInterval(intervalRef.current);\n    setTimerRunning(false);\n    saveTimerData();\n    localStorage.setItem('elapsedTime', 0);\n    localStorage.setItem('startTime', elapsedTime);\n    localStorage.setItem('running', false);\n    clearInterval(intervalRef.current);\n    // Save timer data when stopping the timer\n  };\n\n  const displayTime = milliseconds => {\n    const totalSeconds = Math.floor(milliseconds / 1000);\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor(totalSeconds % 3600 / 60);\n    const seconds = totalSeconds % 60;\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n  const fetchTimerData = async () => {\n    try {\n      const authToken = localStorage.getItem('token');\n      const response = await fetch('http://localhost:5000/timer', {\n        method: 'GET',\n        headers: {\n          Authorization: authToken\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        if (!data.timer.timeStopped) {\n          setTimerRunning(true);\n          setElapsedTime(data.timer.date - data.timer.elapsedTime);\n        } else {\n          setElapsedTime(data.timer.elapsedTime);\n        }\n      } else {\n        console.error('Error fetching timer data:', response.status);\n      }\n    } catch (error) {\n      console.error('Error fetching timer data:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startTimer,\n      children: \"Start Timer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopTimer,\n      children: \"Stop Timer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Reset Timer for Today\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"timerDisplay\",\n      children: [\"Timer: \", displayTime(elapsedTime)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n}\n_s(Timer, \"Wglpk9YLc2yXqgdwMQAdlffgthM=\", false, function () {\n  return [useNavigate];\n});\n_c = Timer;\nvar _c;\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useNavigate","jsxDEV","_jsxDEV","Timer","_s","elapsedTime","setElapsedTime","timerRunning","setTimerRunning","intervalRef","navigate","authToken","localStorage","getItem","storedStartTime","storedElapsedTime","Date","now","console","log","setItem","current","setInterval","prevElapsedTime","fetchTimerData","handleBeforeUnload","event","saveTimerData","preventDefault","returnValue","window","addEventListener","clearInterval","removeEventListener","startTimer","startTime","response","fetch","method","headers","Authorization","body","JSON","stringify","timeStopped","Boolean","error","stopTimer","displayTime","milliseconds","totalSeconds","Math","floor","hours","minutes","seconds","toString","padStart","ok","data","json","timer","date","status","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["C:/Users/Joaol/Desktop/Minute-Masters/client/src/components/timer.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport default function Timer() {\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n  const [timerRunning, setTimerRunning] = useState(false);\r\n  const intervalRef = useRef(null);\r\n  const navigate = useNavigate();\r\n\r\n//   useEffect(() => {\r\n//     const authToken = localStorage.getItem('token');\r\n\r\n//     // Check if the timer was running before the page was refreshed\r\n//     const storedStartTime = localStorage.getItem('startTime');\r\n//     if (localStorage.getItem('running')) {\r\n        \r\n//       const storedElapsedTime = Date.now() - storedStartTime;\r\n//       localStorage.setItem('elapsedTime', storedElapsedTime);\r\n//       setElapsedTime(storedElapsedTime);\r\n\r\n//       intervalRef.current = setInterval(() => {\r\n//         setElapsedTime((prevElapsedTime) => prevElapsedTime + 1000);\r\n//       }, 1000);\r\n//     }\r\n\r\n//     if (!authToken) {\r\n//       // Redirect to login if no token is present\r\n//       navigate('/login');\r\n//     } else {\r\n//       // Fetch timer data when the component mounts\r\n//       fetchTimerData();\r\n//     }\r\n\r\n//     // Cleanup the interval and save timer data when the component unmounts or beforeunload\r\n//     return () => {\r\n//       clearInterval(intervalRef.current);\r\n//       saveTimerData();\r\n//     };\r\n//   }, [navigate]);\r\nuseEffect(() => {\r\n    const authToken = localStorage.getItem('token');\r\n\r\n    // Check if the timer was running before the page was refreshed\r\n    const storedStartTime = localStorage.getItem('startTime');\r\n    if (localStorage.getItem('running')) {\r\n      const storedElapsedTime = Date.now() - storedStartTime;\r\n      console.log(storedElapsedTime);\r\n      localStorage.setItem('elapsedTime', storedElapsedTime);\r\n      setElapsedTime(storedElapsedTime);\r\n      setTimerRunning(true);\r\n\r\n      intervalRef.current = setInterval(() => {\r\n        setElapsedTime((prevElapsedTime) => prevElapsedTime + 1000);\r\n      }, 1000);\r\n    }\r\n\r\n    if (!authToken) {\r\n      // Redirect to login if no token is present\r\n      navigate('/login');\r\n    } else if(localStorage.getItem('running') != null && localStorage.getItem('running') != true){\r\n      // Fetch timer data when the component mounts\r\n      console.log(\"Im here 2\");\r\n      console.log(localStorage.getItem('running'));\r\n      setElapsedTime(localStorage.getItem('elapsedTime'));\r\n    }\r\n    else\r\n    {\r\n        console.log(\"Im here\");\r\n        fetchTimerData();\r\n    }\r\n\r\n    // Handle beforeunload event\r\n    const handleBeforeUnload = (event) => {\r\n      saveTimerData();\r\n      localStorage.setItem('elapsedTime', elapsedTime)\r\n      // Cancel the default behavior to show the confirmation dialog\r\n      event.preventDefault();\r\n      // Chrome requires the returnValue property to be set\r\n\r\n      event.returnValue = '';\r\n    };\r\n\r\n    window.addEventListener('beforeunload', handleBeforeUnload);\r\n\r\n    // Cleanup the interval and remove the beforeunload event listener when the component unmounts\r\n    return () => {\r\n      clearInterval(intervalRef.current);\r\n      saveTimerData();\r\n      window.removeEventListener('beforeunload', handleBeforeUnload);\r\n    };\r\n  }, [navigate]);\r\n\r\n  const startTimer = () => {\r\n    if (!timerRunning) {\r\n      const startTime = Date.now() - elapsedTime;\r\n      setTimerRunning(true);\r\n      localStorage.setItem('running', true);\r\n      localStorage.setItem('startDate', Date.now);\r\n      // Store the start time in localStorage\r\n      localStorage.setItem('startTime', elapsedTime);\r\n      console.log('Start time stored:', startTime);\r\n      intervalRef.current = setInterval(() => {\r\n        setElapsedTime((prevElapsedTime) => prevElapsedTime + 1000);\r\n      }, 1000);\r\n    }\r\n  };\r\n\r\n  const saveTimerData = async () => {\r\n    try {\r\n      const authToken = localStorage.getItem('token');\r\n      const response = await fetch('http://localhost:5000/timer', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: authToken,\r\n        },\r\n        body: JSON.stringify({ elapsedTime, timeStopped: Boolean(timerRunning) }),\r\n      });\r\n\r\n      // Handle the response\r\n    } catch (error) {\r\n      console.error('Error saving timer data:', error);\r\n    }\r\n  };\r\n\r\n  const stopTimer = () => {\r\n    //clearInterval(intervalRef.current);\r\n    setTimerRunning(false);\r\n    saveTimerData();\r\n    localStorage.setItem('elapsedTime', 0);\r\n    localStorage.setItem('startTime', elapsedTime);\r\n    localStorage.setItem('running', false);\r\n    \r\n    clearInterval(intervalRef.current);\r\n    // Save timer data when stopping the timer\r\n    \r\n  };\r\n\r\n  const displayTime = (milliseconds) => {\r\n    const totalSeconds = Math.floor(milliseconds / 1000);\r\n    const hours = Math.floor(totalSeconds / 3600);\r\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\r\n    const seconds = totalSeconds % 60;\r\n\r\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\r\n  };\r\n\r\n  const fetchTimerData = async () => {\r\n    try {\r\n      const authToken = localStorage.getItem('token');\r\n      const response = await fetch('http://localhost:5000/timer', {\r\n        method: 'GET',\r\n        headers: {\r\n          Authorization: authToken,\r\n        },\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        if (!data.timer.timeStopped) {\r\n          setTimerRunning(true);\r\n          setElapsedTime(data.timer.date - data.timer.elapsedTime);\r\n        } else {\r\n          setElapsedTime(data.timer.elapsedTime);\r\n        }\r\n      } else {\r\n        console.error('Error fetching timer data:', response.status);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching timer data:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={startTimer}>Start Timer</button>\r\n      <button onClick={stopTimer}>Stop Timer</button>\r\n      <button>Reset Timer for Today</button>\r\n      <p id=\"timerDisplay\">Timer: {displayTime(elapsedTime)}</p>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}