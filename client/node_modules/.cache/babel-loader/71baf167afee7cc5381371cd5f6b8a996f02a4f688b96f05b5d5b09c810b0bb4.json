{"ast":null,"code":"// const startTimer = () => {\n//   if (!timerRunning) {\n//     fetchTimerData(); // Fetch timer data when starting the timer\n//     const startTime = Date.now() - elapsedTime;\n//     setTimerRunning(true);\n\n//     intervalRef.current = setInterval(() => {\n//       const currentTime = Date.now();\n//       const newElapsedTime = currentTime - startTime;\n//       setElapsedTime(newElapsedTime);\n//     }, 1000);\n//   }\n// };\n\n// const stopTimer = () => {\n//   setTimerRunning(false);\n//   clearInterval(intervalRef.current);\n\n//   // Save timer data when stopping the timer\n//   saveTimerData(elapsedTime);\n// };\n\n// const saveTimerData = async (elapsedTime) => {\n//   try {\n//     const response = await fetch('http://localhost:5000/api/timer', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         Authorization: `Bearer ${yourAuthToken}`, // Include the user's token\n//       },\n//       body: JSON.stringify({ elapsedTime }),\n//     });\n\n//     if (!response.ok) {\n//       console.error('Failed to save timer data');\n//     }\n//   } catch (error) {\n//     console.error('Error saving timer data:', error);\n//   }\n// };\n\n// const fetchTimerData = async () => {\n//   try {\n//     const response = await fetch('http://localhost:5000/api/timer', {\n//       headers: {\n//         Authorization: `Bearer ${yourAuthToken}`, // Include the user's token\n//       },\n//     });\n\n//     if (response.ok) {\n//       const data = await response.json();\n//       // Assuming the data structure includes elapsedTime\n//       if (data && data.timer && data.timer.elapsedTime) {\n//         setElapsedTime(data.timer.elapsedTime);\n//       }\n//     } else {\n//       console.error('Failed to fetch timer data');\n//     }\n//   } catch (error) {\n//     console.error('Error fetching timer data:', error);\n//   }\n// };\nconst startTimer = () => {\n  if (!timerRunning) {\n    fetchTimerData(); // Fetch timer data when starting the timer\n    const startTime = Date.now() - elapsedTime;\n    setTimerRunning(true);\n    intervalRef.current = setInterval(() => {\n      const currentTime = Date.now();\n      const newElapsedTime = currentTime - startTime;\n      setElapsedTime(newElapsedTime);\n    }, 1000);\n  }\n};\nconst stopTimer = () => {\n  setTimerRunning(false);\n  clearInterval(intervalRef.current);\n\n  // Save timer data when stopping the timer\n  saveTimerData(elapsedTime);\n};\nconst saveTimerData = async elapsedTime => {\n  try {\n    const response = await fetch('http://localhost:5000/api/timer', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${yourAuthToken}` // Include the user's token\n      },\n\n      body: JSON.stringify({\n        elapsedTime\n      })\n    });\n    if (!response.ok) {\n      console.error('Failed to save timer data');\n    }\n  } catch (error) {\n    console.error('Error saving timer data:', error);\n  }\n};\nconst fetchTimerData = async () => {\n  try {\n    const response = await fetch('http://localhost:5000/api/timer', {\n      headers: {\n        Authorization: `Bearer ${yourAuthToken}` // Include the user's token\n      }\n    });\n\n    if (response.ok) {\n      const data = await response.json();\n      // Assuming the data structure includes elapsedTime\n      if (data && data.timer && data.timer.elapsedTime) {\n        setElapsedTime(data.timer.elapsedTime);\n      }\n    } else {\n      console.error('Failed to fetch timer data');\n    }\n  } catch (error) {\n    console.error('Error fetching timer data:', error);\n  }\n};","map":{"version":3,"names":["startTimer","timerRunning","fetchTimerData","startTime","Date","now","elapsedTime","setTimerRunning","intervalRef","current","setInterval","currentTime","newElapsedTime","setElapsedTime","stopTimer","clearInterval","saveTimerData","response","fetch","method","headers","Authorization","yourAuthToken","body","JSON","stringify","ok","console","error","data","json","timer"],"sources":["C:/Users/Joaol/Desktop/Minute-Masters/client/src/components/timer.js"],"sourcesContent":["// const startTimer = () => {\r\n//   if (!timerRunning) {\r\n//     fetchTimerData(); // Fetch timer data when starting the timer\r\n//     const startTime = Date.now() - elapsedTime;\r\n//     setTimerRunning(true);\r\n\r\n//     intervalRef.current = setInterval(() => {\r\n//       const currentTime = Date.now();\r\n//       const newElapsedTime = currentTime - startTime;\r\n//       setElapsedTime(newElapsedTime);\r\n//     }, 1000);\r\n//   }\r\n// };\r\n\r\n// const stopTimer = () => {\r\n//   setTimerRunning(false);\r\n//   clearInterval(intervalRef.current);\r\n\r\n//   // Save timer data when stopping the timer\r\n//   saveTimerData(elapsedTime);\r\n// };\r\n\r\n// const saveTimerData = async (elapsedTime) => {\r\n//   try {\r\n//     const response = await fetch('http://localhost:5000/api/timer', {\r\n//       method: 'POST',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//         Authorization: `Bearer ${yourAuthToken}`, // Include the user's token\r\n//       },\r\n//       body: JSON.stringify({ elapsedTime }),\r\n//     });\r\n\r\n//     if (!response.ok) {\r\n//       console.error('Failed to save timer data');\r\n//     }\r\n//   } catch (error) {\r\n//     console.error('Error saving timer data:', error);\r\n//   }\r\n// };\r\n\r\n// const fetchTimerData = async () => {\r\n//   try {\r\n//     const response = await fetch('http://localhost:5000/api/timer', {\r\n//       headers: {\r\n//         Authorization: `Bearer ${yourAuthToken}`, // Include the user's token\r\n//       },\r\n//     });\r\n\r\n//     if (response.ok) {\r\n//       const data = await response.json();\r\n//       // Assuming the data structure includes elapsedTime\r\n//       if (data && data.timer && data.timer.elapsedTime) {\r\n//         setElapsedTime(data.timer.elapsedTime);\r\n//       }\r\n//     } else {\r\n//       console.error('Failed to fetch timer data');\r\n//     }\r\n//   } catch (error) {\r\n//     console.error('Error fetching timer data:', error);\r\n//   }\r\n// };\r\nconst startTimer = () => {\r\n    if (!timerRunning) {\r\n      fetchTimerData(); // Fetch timer data when starting the timer\r\n      const startTime = Date.now() - elapsedTime;\r\n      setTimerRunning(true);\r\n  \r\n      intervalRef.current = setInterval(() => {\r\n        const currentTime = Date.now();\r\n        const newElapsedTime = currentTime - startTime;\r\n        setElapsedTime(newElapsedTime);\r\n      }, 1000);\r\n    }\r\n  };\r\n  \r\n  const stopTimer = () => {\r\n    setTimerRunning(false);\r\n    clearInterval(intervalRef.current);\r\n  \r\n    // Save timer data when stopping the timer\r\n    saveTimerData(elapsedTime);\r\n  };\r\n  \r\n  const saveTimerData = async (elapsedTime) => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/timer', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${yourAuthToken}`, // Include the user's token\r\n        },\r\n        body: JSON.stringify({ elapsedTime }),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        console.error('Failed to save timer data');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error saving timer data:', error);\r\n    }\r\n  };\r\n  \r\n  const fetchTimerData = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/timer', {\r\n        headers: {\r\n          Authorization: `Bearer ${yourAuthToken}`, // Include the user's token\r\n        },\r\n      });\r\n  \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        // Assuming the data structure includes elapsedTime\r\n        if (data && data.timer && data.timer.elapsedTime) {\r\n          setElapsedTime(data.timer.elapsedTime);\r\n        }\r\n      } else {\r\n        console.error('Failed to fetch timer data');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching timer data:', error);\r\n    }\r\n  };\r\n  "],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,UAAU,GAAGA,CAAA,KAAM;EACrB,IAAI,CAACC,YAAY,EAAE;IACjBC,cAAc,CAAC,CAAC,CAAC,CAAC;IAClB,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGC,WAAW;IAC1CC,eAAe,CAAC,IAAI,CAAC;IAErBC,WAAW,CAACC,OAAO,GAAGC,WAAW,CAAC,MAAM;MACtC,MAAMC,WAAW,GAAGP,IAAI,CAACC,GAAG,CAAC,CAAC;MAC9B,MAAMO,cAAc,GAAGD,WAAW,GAAGR,SAAS;MAC9CU,cAAc,CAACD,cAAc,CAAC;IAChC,CAAC,EAAE,IAAI,CAAC;EACV;AACF,CAAC;AAED,MAAME,SAAS,GAAGA,CAAA,KAAM;EACtBP,eAAe,CAAC,KAAK,CAAC;EACtBQ,aAAa,CAACP,WAAW,CAACC,OAAO,CAAC;;EAElC;EACAO,aAAa,CAACV,WAAW,CAAC;AAC5B,CAAC;AAED,MAAMU,aAAa,GAAG,MAAOV,WAAW,IAAK;EAC3C,IAAI;IACF,MAAMW,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;MAC9DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAG,UAASC,aAAc,EAAC,CAAE;MAC5C,CAAC;;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEnB;MAAY,CAAC;IACtC,CAAC,CAAC;IAEF,IAAI,CAACW,QAAQ,CAACS,EAAE,EAAE;MAChBC,OAAO,CAACC,KAAK,CAAC,2BAA2B,CAAC;IAC5C;EACF,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;EAClD;AACF,CAAC;AAED,MAAM1B,cAAc,GAAG,MAAAA,CAAA,KAAY;EACjC,IAAI;IACF,MAAMe,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;MAC9DE,OAAO,EAAE;QACPC,aAAa,EAAG,UAASC,aAAc,EAAC,CAAE;MAC5C;IACF,CAAC,CAAC;;IAEF,IAAIL,QAAQ,CAACS,EAAE,EAAE;MACf,MAAMG,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;MAClC;MACA,IAAID,IAAI,IAAIA,IAAI,CAACE,KAAK,IAAIF,IAAI,CAACE,KAAK,CAACzB,WAAW,EAAE;QAChDO,cAAc,CAACgB,IAAI,CAACE,KAAK,CAACzB,WAAW,CAAC;MACxC;IACF,CAAC,MAAM;MACLqB,OAAO,CAACC,KAAK,CAAC,4BAA4B,CAAC;IAC7C;EACF,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;EACpD;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}