{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nconst Timer = () => {\n  _s();\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [timerRunning, setTimerRunning] = useState(false);\n  const intervalRef = useRef(null);\n\n  //   useEffect(() => {\n  //     // Fetch initial timer value when the component mounts\n  //     fetchTimerData();\n  //   }, []);\n\n  //   const startTimer = () => {\n  //     if (!timerRunning) {\n  //       // Fetch timer data when starting the timer\n  //       fetchTimerData();\n\n  //       const startTime = Date.now() - elapsedTime;\n  //       setTimerRunning(true);\n\n  //       intervalRef.current = setInterval(() => {\n  //         const currentTime = Date.now();\n  //         const newElapsedTime = currentTime - startTime;\n  //         setElapsedTime(newElapsedTime);\n  //       }, 1000);\n  //     }\n  //   };\n\n  //   const stopTimer = () => {\n  //     setTimerRunning(false);\n  //     clearInterval(intervalRef.current);\n\n  //     // Save timer data when stopping the timer\n  //     saveTimerData(elapsedTime);\n  //   };\n\n  //   const displayTime = (milliseconds) => {\n  //     const totalSeconds = Math.floor(milliseconds / 1000);\n  //     const hours = Math.floor(totalSeconds / 3600);\n  //     const minutes = Math.floor((totalSeconds % 3600) / 60);\n  //     const seconds = totalSeconds % 60;\n\n  //     return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  //   };\n\n  //   const saveTimerData = async (elapsedTime) => {\n  //     try {\n  //       const response = await fetch('http://localhost:3000/timer', {\n  //         method: 'POST',\n  //         headers: {\n  //           'Content-Type': 'application/json',\n  //         },\n  //         body: JSON.stringify({ elapsedTime }),\n  //       });\n\n  //       if (!response.ok) {\n  //         console.error('Failed to save timer data');\n  //       }\n  //     } catch (error) {\n  //       console.error('Error saving timer data:', error);\n  //     }\n  //   };\n\n  //   const fetchTimerData = async () => {\n  //     try {\n  //       const response = await fetch('http://localhost:5000/timer');\n  //       if (response.ok) {\n  //         const data = await response.json();\n  //         // Assuming the data structure includes elapsedTime\n  //         if (data && data.elapsedTime) {\n  //           setElapsedTime(data.elapsedTime);\n  //         }\n  //       } else {\n  //         console.error('Failed to fetch timer data');\n  //       }\n  //     } catch (error) {\n  //       console.error('Error fetching timer data:', error);\n  //     }\n  //   };\n\n  //   return (\n  //     <div>\n  //       <button onClick={startTimer}>Start Timer</button>\n  //       <button onClick={stopTimer}>Stop Timer</button>\n  //       <p id=\"timerDisplay\">Timer: {displayTime(elapsedTime)}</p>\n  //     </div>\n  //   );\n  // };\n\n  // export default Timer;\n  const startTimer = () => {\n    if (!timerRunning) {\n      fetchTimerData(); // Fetch timer data when starting the timer\n      const startTime = Date.now() - elapsedTime;\n      setTimerRunning(true);\n      intervalRef.current = setInterval(() => {\n        const currentTime = Date.now();\n        const newElapsedTime = currentTime - startTime;\n        setElapsedTime(newElapsedTime);\n      }, 1000);\n    }\n  };\n  const saveTimerData = async elapsedTime => {\n    try {\n      const authToken = localStorage.getItem('authToken');\n      const response = await fetch('http://localhost:5000/api/timer', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${authToken}`\n        },\n        body: JSON.stringify({\n          elapsedTime\n        })\n      });\n\n      // Handle the response\n    } catch (error) {\n      console.error('Error saving timer data:', error);\n    }\n  };\n  const fetchTimerData = async () => {\n    try {\n      const authToken = localStorage.getItem('authToken');\n      const response = await fetch('http://localhost:5000/api/timer', {\n        headers: {\n          Authorization: `Bearer ${authToken}`\n        }\n      });\n\n      // Handle the response\n    } catch (error) {\n      console.error('Error fetching timer data:', error);\n    }\n  };\n};\n_s(Timer, \"vka8dsLZeq914j8uut+PJjzE4sQ=\");\n_c = Timer;\nvar _c;\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Timer","_s","elapsedTime","setElapsedTime","timerRunning","setTimerRunning","intervalRef","startTimer","fetchTimerData","startTime","Date","now","current","setInterval","currentTime","newElapsedTime","saveTimerData","authToken","localStorage","getItem","response","fetch","method","headers","Authorization","body","JSON","stringify","error","console","_c","$RefreshReg$"],"sources":["C:/Users/Joaol/Desktop/Minute-Masters/client/src/components/timer.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst Timer = () => {\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n  const [timerRunning, setTimerRunning] = useState(false);\r\n  const intervalRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     // Fetch initial timer value when the component mounts\r\n//     fetchTimerData();\r\n//   }, []);\r\n\r\n//   const startTimer = () => {\r\n//     if (!timerRunning) {\r\n//       // Fetch timer data when starting the timer\r\n//       fetchTimerData();\r\n      \r\n//       const startTime = Date.now() - elapsedTime;\r\n//       setTimerRunning(true);\r\n\r\n//       intervalRef.current = setInterval(() => {\r\n//         const currentTime = Date.now();\r\n//         const newElapsedTime = currentTime - startTime;\r\n//         setElapsedTime(newElapsedTime);\r\n//       }, 1000);\r\n//     }\r\n//   };\r\n\r\n//   const stopTimer = () => {\r\n//     setTimerRunning(false);\r\n//     clearInterval(intervalRef.current);\r\n\r\n//     // Save timer data when stopping the timer\r\n//     saveTimerData(elapsedTime);\r\n//   };\r\n\r\n//   const displayTime = (milliseconds) => {\r\n//     const totalSeconds = Math.floor(milliseconds / 1000);\r\n//     const hours = Math.floor(totalSeconds / 3600);\r\n//     const minutes = Math.floor((totalSeconds % 3600) / 60);\r\n//     const seconds = totalSeconds % 60;\r\n\r\n//     return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\r\n//   };\r\n\r\n//   const saveTimerData = async (elapsedTime) => {\r\n//     try {\r\n//       const response = await fetch('http://localhost:3000/timer', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify({ elapsedTime }),\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         console.error('Failed to save timer data');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error saving timer data:', error);\r\n//     }\r\n//   };\r\n\r\n//   const fetchTimerData = async () => {\r\n//     try {\r\n//       const response = await fetch('http://localhost:5000/timer');\r\n//       if (response.ok) {\r\n//         const data = await response.json();\r\n//         // Assuming the data structure includes elapsedTime\r\n//         if (data && data.elapsedTime) {\r\n//           setElapsedTime(data.elapsedTime);\r\n//         }\r\n//       } else {\r\n//         console.error('Failed to fetch timer data');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error fetching timer data:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <button onClick={startTimer}>Start Timer</button>\r\n//       <button onClick={stopTimer}>Stop Timer</button>\r\n//       <p id=\"timerDisplay\">Timer: {displayTime(elapsedTime)}</p>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Timer;\r\nconst startTimer = () => {\r\n    if (!timerRunning) {\r\n      fetchTimerData(); // Fetch timer data when starting the timer\r\n      const startTime = Date.now() - elapsedTime;\r\n      setTimerRunning(true);\r\n  \r\n      intervalRef.current = setInterval(() => {\r\n        const currentTime = Date.now();\r\n        const newElapsedTime = currentTime - startTime;\r\n        setElapsedTime(newElapsedTime);\r\n      }, 1000);\r\n    }\r\n  };\r\n  \r\n  const saveTimerData = async (elapsedTime) => {\r\n    try {\r\n      const authToken = localStorage.getItem('authToken');\r\n  \r\n      const response = await fetch('http://localhost:5000/api/timer', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${authToken}`,\r\n        },\r\n        body: JSON.stringify({ elapsedTime }),\r\n      });\r\n  \r\n      // Handle the response\r\n    } catch (error) {\r\n      console.error('Error saving timer data:', error);\r\n    }\r\n  };\r\n  \r\n  const fetchTimerData = async () => {\r\n    try {\r\n      const authToken = localStorage.getItem('authToken');\r\n  \r\n      const response = await fetch('http://localhost:5000/api/timer', {\r\n        headers: {\r\n          Authorization: `Bearer ${authToken}`,\r\n        },\r\n      });\r\n  \r\n      // Handle the response\r\n    } catch (error) {\r\n      console.error('Error fetching timer data:', error);\r\n    }\r\n  };\r\n  \r\n}"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAE1D,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACO,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAMS,WAAW,GAAGR,MAAM,CAAC,IAAI,CAAC;;EAElC;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA,MAAMS,UAAU,GAAGA,CAAA,KAAM;IACrB,IAAI,CAACH,YAAY,EAAE;MACjBI,cAAc,CAAC,CAAC,CAAC,CAAC;MAClB,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGT,WAAW;MAC1CG,eAAe,CAAC,IAAI,CAAC;MAErBC,WAAW,CAACM,OAAO,GAAGC,WAAW,CAAC,MAAM;QACtC,MAAMC,WAAW,GAAGJ,IAAI,CAACC,GAAG,CAAC,CAAC;QAC9B,MAAMI,cAAc,GAAGD,WAAW,GAAGL,SAAS;QAC9CN,cAAc,CAACY,cAAc,CAAC;MAChC,CAAC,EAAE,IAAI,CAAC;IACV;EACF,CAAC;EAED,MAAMC,aAAa,GAAG,MAAOd,WAAW,IAAK;IAC3C,IAAI;MACF,MAAMe,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MAEnD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;QAC9DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAG,UAASP,SAAU;QACrC,CAAC;QACDQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEzB;QAAY,CAAC;MACtC,CAAC,CAAC;;MAEF;IACF,CAAC,CAAC,OAAO0B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;EACF,CAAC;EAED,MAAMpB,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMS,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MAEnD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;QAC9DE,OAAO,EAAE;UACPC,aAAa,EAAG,UAASP,SAAU;QACrC;MACF,CAAC,CAAC;;MAEF;IACF,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD;EACF,CAAC;AAEH,CAAC;AAAA3B,EAAA,CAzIKD,KAAK;AAAA8B,EAAA,GAAL9B,KAAK;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}